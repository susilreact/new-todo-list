{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","items","deleteItem","changeText","listItems","map","item","className","key","type","id","value","text","onChange","e","target","icon","onClick","duration","easing","library","add","faTrash","App","props","addItem","preventDefault","newItem","state","currentItems","newItems","setState","handleInput","Date","now","filterItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAoCeA,EA/BG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC/BC,EAAYH,EAAMI,KAAI,SAACC,GAC1B,OACG,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC7B,2BACG,2BACGC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAD,OAAOX,EAAWW,EAAEC,OAAOJ,MAAOL,EAAKE,QAGpD,8BACG,kBAAC,IAAD,CACGD,UAAU,UACVS,KAAK,QACLC,QAAS,kBAAMf,EAAWI,EAAKE,cAOjD,OACG,6BACG,kBAAC,IAAD,CAAUU,SAAU,IAAKC,OAAO,eAC5Bf,K,uBCxBbgB,IAAQC,IAAIC,K,IAiFGC,E,kDA9EZ,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IASTC,QAAU,SAACX,GACRA,EAAEY,iBACF,IAAMC,EAAU,EAAKC,MAAMC,aAE3B,GAAqB,KAAjBF,EAAQf,KAAa,CACtB,IAAMkB,EAAQ,sBAAO,EAAKF,MAAM3B,OAAlB,CAAyB0B,IAEvC,EAAKI,SAAS,CACX9B,MAAO6B,EACPD,aAAc,CACXjB,KAAM,GACNJ,IAAK,QArBE,EA2BnBwB,YAAc,SAAClB,GACZ,EAAKiB,SAAS,CACXF,aAAc,CACXjB,KAAME,EAAEC,OAAOJ,MACfH,IAAKyB,KAAKC,UA/BA,EAmCnBhC,WAAa,SAACM,GACX,IAAM2B,EAAc,EAAKP,MAAM3B,MAAMmC,QAAO,SAAC9B,GAAD,OAAUA,EAAKE,MAAQA,KACnE,EAAKuB,SAAS,CACX9B,MAAOkC,KAtCM,EAyCnBhC,WAAa,SAACS,EAAMJ,GACjB,IAAMP,EAAQ,EAAK2B,MAAM3B,MACzBA,EAAMI,KAAI,SAACC,GACJA,EAAKE,MAAQA,IACdF,EAAKM,KAAOA,MAGlB,EAAKmB,SAAS,CACX9B,MAAOA,KA/CV,EAAK2B,MAAQ,CACV3B,MAAO,GACP4B,aAAc,CACXjB,KAAM,GACNJ,IAAK,KANK,E,qDAsDhB,OACG,yBAAKD,UAAU,OACZ,gCACG,0BAAMG,GAAG,aAAa2B,SAAUC,KAAKb,SAClC,2BACGhB,KAAK,OACL8B,YAAY,OACZ5B,MAAO2B,KAAKV,MAAMC,aAAajB,KAC/BC,SAAUyB,KAAKN,cAElB,4BAAQvB,KAAK,UAAb,UAGH,kBAAC,EAAD,CACGR,MAAOqC,KAAKV,MAAM3B,MAClBC,WAAYoC,KAAKpC,WACjBC,WAAYmC,KAAKnC,mB,GAvEjBqC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce72f75e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ListItems = ({ items, deleteItem, changeText }) => {\r\n   const listItems = items.map((item) => {\r\n      return (\r\n         <div className='list' key={item.key}>\r\n            <p>\r\n               <input\r\n                  type='text'\r\n                  id={item.key}\r\n                  value={item.text}\r\n                  onChange={(e) => changeText(e.target.value, item.key)}\r\n               />\r\n\r\n               <span>\r\n                  <FontAwesomeIcon\r\n                     className='faicons'\r\n                     icon='trash'\r\n                     onClick={() => deleteItem(item.key)}\r\n                  />\r\n               </span>\r\n            </p>\r\n         </div>\r\n      );\r\n   });\r\n   return (\r\n      <div>\r\n         <FlipMove duration={300} easing='ease-in-out'>\r\n            {listItems}\r\n         </FlipMove>\r\n      </div>\r\n   );\r\n};\r\nexport default ListItems;\r\n","import React, { Component } from 'react';\nimport ListItems from './ListItems';\nimport './App.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         items: [],\n         currentItems: {\n            text: '',\n            key: ''\n         }\n      };\n   }\n   addItem = (e) => {\n      e.preventDefault();\n      const newItem = this.state.currentItems;\n\n      if (newItem.text !== '') {\n         const newItems = [...this.state.items, newItem];\n\n         this.setState({\n            items: newItems,\n            currentItems: {\n               text: '',\n               key: ''\n            }\n         });\n      }\n   };\n\n   handleInput = (e) => {\n      this.setState({\n         currentItems: {\n            text: e.target.value,\n            key: Date.now()\n         }\n      });\n   };\n   deleteItem = (key) => {\n      const filterItems = this.state.items.filter((item) => item.key !== key);\n      this.setState({\n         items: filterItems\n      });\n   };\n   changeText = (text, key) => {\n      const items = this.state.items;\n      items.map((item) => {\n         if (item.key === key) {\n            item.text = text;\n         }\n      });\n      this.setState({\n         items: items\n      });\n   };\n\n   render() {\n      return (\n         <div className='App'>\n            <header>\n               <form id='to-do-form' onSubmit={this.addItem}>\n                  <input\n                     type='text'\n                     placeholder='text'\n                     value={this.state.currentItems.text}\n                     onChange={this.handleInput}\n                  />\n                  <button type='submit'> Add </button>\n               </form>\n\n               <ListItems\n                  items={this.state.items}\n                  deleteItem={this.deleteItem}\n                  changeText={this.changeText}\n               />\n            </header>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}